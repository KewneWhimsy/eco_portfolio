---
// src/pages/index.astro - Redirection intelligente selon la langue du navigateur
import Layout from "../layouts/layout.astro";

// -----------------------------------------------------------------------------
// ÉTAPE 1: RÉCUPÉRATION DES PRÉFÉRENCES LINGUISTIQUES DU NAVIGATEUR
// -----------------------------------------------------------------------------
// L'en-tête HTTP "Accept-Language" est envoyé par tous les navigateurs et contient
// les préférences linguistiques de l'utilisateur, triées par ordre de préférence
// Format typique: "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7"
// - fr-FR: Français (France) avec priorité implicite q=1.0 (maximum)
// - fr: Français générique avec priorité q=0.9
// - en-US: Anglais (USA) avec priorité q=0.8
// - en: Anglais générique avec priorité q=0.7
const acceptLanguage = Astro.request.headers.get("accept-language") || "";

// Liste des langues que le site prend en charge
const supportedLangs = ["fr", "en", "de"];

// -----------------------------------------------------------------------------
// ÉTAPE 2: ANALYSE DE L'EN-TÊTE ACCEPT-LANGUAGE
// -----------------------------------------------------------------------------
function getPreferredLanguages(acceptLanguageHeader: string): string[] {
  // Séparation des différentes langues (séparées par des virgules)
  return acceptLanguageHeader
    .split(',')
    .map(lang => {
      // Pour chaque langue, on extrait le code et la priorité (qualité)
      // Exemple: pour "fr-FR;q=0.8", on obtient tag="fr-FR" et quality="q=0.8"
      const [tag, quality = 'q=1.0'] = lang.trim().split(';');
      
      // Conversion de la priorité en nombre (ex: "q=0.8" devient 0.8)
      const q = parseFloat(quality.replace('q=', ''));
      
      // Extraction du code de langue principale (sans la région)
      // Exemple: "fr-FR" devient "fr", "en-US" devient "en"
      const langCode = tag.split('-')[0].toLowerCase();
      
      return { langCode, q };
    })
    // Tri des langues par priorité décroissante
    // Les langues avec la plus haute priorité (q) seront traitées en premier
    .sort((a, b) => b.q - a.q)
    // On ne conserve que les codes de langue (sans les priorités)
    .map(item => item.langCode);
}

// -----------------------------------------------------------------------------
// ÉTAPE 3: SÉLECTION DE LA MEILLEURE LANGUE
// -----------------------------------------------------------------------------
function getBestLanguage(preferredLangs: string[], supportedLangs: string[]): string {
  // Première passe: on cherche une correspondance exacte
  // Si l'utilisateur préfère "fr" et que notre site supporte "fr", on utilise "fr"
  for (const lang of preferredLangs) {
    if (supportedLangs.includes(lang)) {
      return lang; // Correspondance exacte trouvée
    }
  }
  
  // Deuxième passe: on cherche une correspondance de langue principale
  // Si l'utilisateur préfère "fr-CA" (non supporté) mais que notre site supporte "fr",
  // on utilise "fr" comme alternative acceptable
  for (const lang of preferredLangs) {
    const mainLang = lang.split('-')[0]; // Extrait "fr" de "fr-CA"
    if (supportedLangs.includes(mainLang)) {
      return mainLang; // Correspondance de langue principale trouvée
    }
  }
  
  // Fallback: si aucune correspondance n'est trouvée, on utilise l'anglais
  // comme langue par défaut (norme internationale)
  return 'en';
}

// -----------------------------------------------------------------------------
// ÉTAPE 4: REDIRECTION VERS LA PAGE DANS LA LANGUE APPROPRIÉE
// -----------------------------------------------------------------------------
// On traite l'en-tête Accept-Language pour obtenir les langues préférées
const preferredLanguages = getPreferredLanguages(acceptLanguage);

// On sélectionne la meilleure langue en fonction des préférences et de nos langues supportées
const targetLang = getBestLanguage(preferredLanguages, supportedLangs);

// Redirection vers la page d'accueil dans la langue sélectionnée
// Cette redirection se fait côté serveur (SSR), ce qui évite tout clignotement
// ou chargement intermédiaire pour l'utilisateur
return Astro.redirect(`/${targetLang}`);
---

<!-- 
Ce contenu HTML ne sera jamais affiché grâce à la redirection serveur ci-dessus.
Il sert uniquement de "fallback" (solution de secours) dans le cas très improbable
où la redirection échouerait pour une raison quelconque.

L'anglais est utilisé ici car c'est la langue la plus susceptible d'être
comprise internationalement en cas de problème.
-->
<Layout title="Redirecting..." description="Redirecting to appropriate language version" lang="en">
  <div class="container mx-auto px-4 py-8">
    <p>Redirecting to the appropriate language version...</p>
    <p>
      <a href="/en">Click here if you are not automatically redirected</a>
    </p>
  </div>
</Layout>
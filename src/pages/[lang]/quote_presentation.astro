---
// Import du layout standard
import Layout from "../../layouts/layout.astro";
// Import de la configuration centralisée des prix (TypeScript)
import { 
  getPackagesForLang, 
  getAdditionalOptionsForLang, 
  getIncludedFeaturesForLang,
  getPricesForJS,
  type Lang
} from "../../config/pricing.ts";

// Récupérer le paramètre de langue depuis l'URL
export function getStaticPaths() {
  return [
    { params: { lang: "fr" } },
    { params: { lang: "en" } },
    { params: { lang: "de" } },
  ];
}

const lang = Astro.params.lang as Lang;

// Obtenir les données de prix depuis la configuration centralisée
const showcasePackages = getPackagesForLang(lang);
const additionalOptions = getAdditionalOptionsForLang(lang);
const includedInAllPackages = getIncludedFeaturesForLang(lang);

// Contenu traduit pour chaque langue (seulement les textes de l'interface)
const content = {
  fr: {
    title: "Josselin HANEL - Demande de prix pour site internet",
    description: "Demandez un prix pour votre site internet simple, rapide et économe en énergie",
    quoteTitle: "Devis pour un site de présentation",
    quoteIntro: "Obtenez un site internet professionnel qui présente votre activité à vos clients. Un site qui s'affiche bien sur mobile comme sur ordinateur, qui charge vite tout en étant économe.",
    // Labels formulaire
    nameLabel: "Votre nom",
    emailLabel: "Votre email", 
    phoneLabel: "Votre téléphone (optionnel)",
    projectTypeLabel: "Type de site",
    projectTypeOptions: {
      showcase: "Site pour présenter votre activité",
      blog: "Site avec un blog",
      portfolio: "Site CV / Portfolio en ligne",
      other: "Autre besoin (à préciser ci-dessous)",
    },
    budgetLabel: "Budget approximatif",
    budgetOptions: {
      low: "Moins de 500€",
      medium: "500€ à 1000€", 
      high: "Plus de 1000€",
      flexible: "Flexible / À discuter",
    },
    deadlineLabel: "Pour quand en avez-vous besoin ?",
    deadlineOptions: {
      urgent: "Urgent (moins d'un mois)",
      medium: "Dans 1 à 3 mois",
      flexible: "Pas d'urgence / Flexible",
    },
    projectDescLabel: "Votre activité et vos besoins",
    projectDescPlaceholder: "Dites-moi simplement ce que vous faites et ce que vous attendez de votre site (à quoi il doit servir, ce que vous aimeriez qu'il contienne, exemples de sites que vous aimez...)",
    additionalInfoLabel: "Infos complémentaires",
    additionalInfoPlaceholder: "Précisez ici si vous avez déjà un logo, des photos, des textes, ou des contraintes particulières...",
    submitButton: "Demander mon prix",
    submitting: "Envoi en cours...",
    successMessage: "Merci ! Votre demande a été envoyée avec succès. Je vous contacterai sous 24-48h avec une proposition personnalisée.",
    errorMessage: "Une erreur est survenue. Veuillez réessayer ou me contacter directement par email.",
    requiredField: "Ce champ est requis",
    specifyNeed: "Précisez votre besoin *",
    specifyNeedPlaceholder: "Dites-moi quel type de site ou d'outil en ligne vous recherchez...",
  },
  en: {
    title: "Josselin HANEL - Showcase Website Quote",
    description: "Request a quote for your professional, eco-friendly and high-performance showcase website",
    quoteTitle: "Showcase Website Quote",
    quoteIntro: "Get a professional website that reflects your business identity. A high-performance, eco-friendly website optimized for all devices.",
    // Form labels
    nameLabel: "Your name",
    emailLabel: "Your email",
    phoneLabel: "Your phone (optional)",
    projectTypeLabel: "Website type",
    projectTypeOptions: {
      showcase: "Showcase website",
      blog: "Showcase with blog", 
      portfolio: "Portfolio / Online resume",
      other: "Other need (please specify below)",
    },
    budgetLabel: "Approximate budget", 
    budgetOptions: {
      low: "Less than €500",
      medium: "€500 to €1000",
      high: "More than €1000",
      flexible: "Flexible / To be discussed",
    },
    deadlineLabel: "Desired deadline",
    deadlineOptions: {
      urgent: "Urgent (less than a month)",
      medium: "In 1 to 3 months", 
      flexible: "Flexible / No urgency",
    },
    projectDescLabel: "Your business and needs",
    projectDescPlaceholder: "Briefly describe your business and what you expect from your website (goals, desired style, references of websites you like...)",
    additionalInfoLabel: "Additional information",
    additionalInfoPlaceholder: "Are there any other important details I should know? (content already available, existing logo, specific constraints...)",
    submitButton: "Request my quote",
    submitting: "Sending...",
    successMessage: "Thank you! Your quote request has been successfully sent. I will contact you within 24-48 hours with a personalized proposal.",
    errorMessage: "An error occurred. Please try again or contact me directly by email.",
    requiredField: "This field is required",
    specifyNeed: "Specify your need *",
    specifyNeedPlaceholder: "Describe the type of website or application you need...",
  },
  de: {
    title: "Josselin HANEL - Angebot für Präsentationswebsite",
    description: "Fordern Sie ein Angebot für Ihre professionelle, umweltfreundliche und leistungsstarke Präsentationswebsite an",
    quoteTitle: "Angebot für Präsentationswebsite", 
    quoteIntro: "Erhalten Sie eine professionelle Website, die die Identität Ihres Unternehmens widerspiegelt. Eine leistungsstarke, umweltfreundliche Website, optimiert für alle Geräte.",
    // Formular-Labels
    nameLabel: "Ihr Name",
    emailLabel: "Ihre E-Mail",
    phoneLabel: "Ihre Telefonnummer (optional)",
    projectTypeLabel: "Website-Typ",
    projectTypeOptions: {
      showcase: "Präsentationswebsite",
      blog: "Präsentation mit Blog",
      portfolio: "Portfolio / Online-Lebenslauf",
      other: "Anderer Bedarf (bitte unten angeben)",
    },
    budgetLabel: "Ungefähres Budget",
    budgetOptions: {
      low: "Weniger als 500€",
      medium: "500€ bis 1000€",
      high: "Mehr als 1000€", 
      flexible: "Flexibel / Zu besprechen",
    },
    deadlineLabel: "Gewünschter Termin",
    deadlineOptions: {
      urgent: "Dringend (weniger als ein Monat)",
      medium: "In 1 bis 3 Monaten",
      flexible: "Flexibel / Keine Eile",
    },
    projectDescLabel: "Ihr Unternehmen und Ihre Bedürfnisse",
    projectDescPlaceholder: "Beschreiben Sie kurz Ihr Unternehmen und was Sie von Ihrer Website erwarten (Ziele, gewünschter Stil, Referenzen von Websites, die Ihnen gefallen...)",
    additionalInfoLabel: "Zusätzliche Informationen",
    additionalInfoPlaceholder: "Gibt es andere wichtige Details, die ich wissen sollte? (bereits verfügbarer Inhalt, bestehendes Logo, besondere Einschränkungen...)",
    submitButton: "Angebot anfordern",
    submitting: "Wird gesendet...",
    successMessage: "Vielen Dank! Ihre Angebotsanfrage wurde erfolgreich gesendet. Ich werde mich innerhalb von 24-48 Stunden mit einem personalisierten Angebot bei Ihnen melden.",
    errorMessage: "Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut oder kontaktieren Sie mich direkt per E-Mail.",
    requiredField: "Dieses Feld ist erforderlich",
    specifyNeed: "Geben Sie Ihren Bedarf an *", 
    specifyNeedPlaceholder: "Beschreiben Sie die Art der Website oder Anwendung, die Sie benötigen...",
  },
} as const;

// Utiliser la langue demandée ou français par défaut
const t = content[lang] || content.fr;

// Déterminer si le mode éco est actif en fonction de l'URL
const { pathname } = Astro.url;
const isEcoMode = pathname.includes("/eco");

// Important ! Créer un objet avec toutes les traductions nécessaires pour le script client
const clientTranslations = {
  lang,
  additionalInfoLabel: t.additionalInfoLabel,
  additionalInfoPlaceholder: t.additionalInfoPlaceholder,
  specifyNeed: t.specifyNeed,
  specifyNeedPlaceholder: t.specifyNeedPlaceholder,
  successMessage: t.successMessage,
  errorMessage: t.errorMessage,
  submitting: t.submitting,
};

// Convertir les prix pour le JavaScript (extraire les nombres)
const pricesForJS = getPricesForJS();
---

<Layout
  title={t.title}
  description={t.description} 
  lang={lang}
  isEcoMode={isEcoMode}
>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 border-b border-accent pb-2">
      {t.quoteTitle}
    </h1>
    
    <!-- Structure mobile-first: les packages seront affichés au-dessus sur mobile, à droite sur desktop -->
    <div class="block md:hidden mb-8">
      <!-- Packages visibles uniquement sur mobile -->
      <h2 class="text-lg font-semibold mb-3 text-accent">
        {lang === "fr" ? "Mes formules de sites internet" : 
         lang === "en" ? "My showcase website packages" : 
         "Meine Präsentationswebsite-Pakete"}
      </h2>

      <div class="space-y-4">
        <!-- Standard (mis en premier car plus populaire) -->
        <div class="p-3 border-2 border-accent rounded-lg">
          <div class="font-semibold text-accent mb-2">
            {showcasePackages.standard.title} - {showcasePackages.standard.price}
          </div>
          <ul class="list-disc pl-5 text-sm space-y-1">
            {showcasePackages.standard.features.map((feature: string) => <li>{feature}</li>)}
          </ul>
        </div>

        <!-- Basic -->
        <div class="p-3 border border-accent border-opacity-30 rounded-lg">
          <div class="font-semibold text-accent mb-2">
            {showcasePackages.basic.title} - {showcasePackages.basic.price}
          </div>
          <ul class="list-disc pl-5 text-sm space-y-1">
            {showcasePackages.basic.features.map((feature: string) => <li>{feature}</li>)}
          </ul>
        </div>

        <!-- Premium -->
        <div class="p-3 border border-accent border-opacity-30 rounded-lg">
          <div class="font-semibold text-accent mb-2">
            {showcasePackages.premium.title} - {showcasePackages.premium.price}
          </div>
          <ul class="list-disc pl-5 text-sm space-y-1">
            {showcasePackages.premium.features.map((feature: string) => <li>{feature}</li>)}
          </ul>
        </div>
      </div>

      <!-- Ce que tous les forfaits incluent (sur mobile) -->
      <div class="mt-4 p-3 bg-secondary bg-opacity-50 rounded-lg">
        <h4 class="font-semibold text-accent mb-2 text-sm">
          {lang === "fr" ? "Tous les forfaits incluent :" : 
           lang === "en" ? "All packages include:" : 
           "Alle Pakete beinhalten:"}
        </h4>
        <ul class="list-disc pl-5 text-sm">
          {includedInAllPackages.map((feature: string) => <li>{feature}</li>)}
        </ul>
      </div>
    </div>

    <div class="flex flex-col md:flex-row gap-8">
      <!-- Formulaire de devis -->
      <div class="md:w-2/3">
        <p class="mb-6">
          {t.quoteIntro}
        </p>

        <form id="quote-form" class="space-y-5">
          <!-- Champ caché pour API Web3Forms -->
          <input
            type="hidden"
            name="access_key"
            value="2dcc3f1b-036f-48a7-987a-cdada0d05ae5"
          />
          <input
            type="hidden"
            name="from_name"
            value="Portfolio Devis Site Vitrine"
          />
          <input
            type="hidden"
            name="subject"
            value="Nouvelle demande de devis site vitrine"
          />

          <!-- Section Info de contact -->
          <div class="bg-secondary bg-opacity-20 p-5 rounded-lg space-y-4">
            <h2 class="text-xl font-semibold text-accent mb-3">
              {lang === "fr" ? "Vos coordonnées" : 
               lang === "en" ? "Your contact information" : 
               "Ihre Kontaktdaten"}
            </h2>

            <!-- Nom -->
            <div>
              <label for="name" class="block mb-1 font-medium">{t.nameLabel} *</label>
              <input
                type="text"
                id="name"
                name="name"
                class="w-full p-2 border border-form bg-primary rounded-md"
                required
              />
            </div>

            <!-- Email -->
            <div>
              <label for="email" class="block mb-1 font-medium">{t.emailLabel} *</label>
              <input
                type="email"
                id="email"
                name="email"
                class="w-full p-2 border border-form bg-primary rounded-md"
                required
              />
            </div>

            <!-- Téléphone -->
            <div>
              <label for="phone" class="block mb-1 font-medium">{t.phoneLabel}</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                class="w-full p-2 border border-form bg-primary rounded-md"
              />
            </div>
          </div>

          <!-- Section détails du projet -->
          <div class="bg-secondary bg-opacity-20 p-5 rounded-lg space-y-4">
            <h2 class="text-xl font-semibold text-accent mb-3">
              {lang === "fr" ? "Votre projet de site" : 
               lang === "en" ? "Your website project" : 
               "Ihr Website-Projekt"}
            </h2>

            <!-- Type de site -->
            <div>
              <label for="project_type" class="block mb-1 font-medium">{t.projectTypeLabel} *</label>
              <select
                id="project_type"
                name="project_type"
                class="w-full p-2 border border-form bg-primary rounded-md"
                required
              >
                <option value="showcase" selected>{t.projectTypeOptions.showcase}</option>
                <option value="blog">{t.projectTypeOptions.blog}</option>
                <option value="portfolio">{t.projectTypeOptions.portfolio}</option>
                <option value="other">{t.projectTypeOptions.other}</option>
              </select>
            </div>

            <!-- Formule souhaitée -->
            <div>
              <label for="service_package" class="block mb-1 font-medium">
                {lang === "fr" ? "Formule qui vous intéresse" : 
                 lang === "en" ? "Desired package" : 
                 "Gewünschtes Paket"}
              </label>
              <select
                id="service_package"
                name="service_package"
                class="w-full p-2 border border-form bg-primary rounded-md"
                data-price-basic={pricesForJS.basic}
                data-price-standard={pricesForJS.standard}
                data-price-premium={pricesForJS.premium}
              >
                <option value="standard" selected data-price={pricesForJS.standard}>
                  {showcasePackages.standard.title} - {showcasePackages.standard.price}
                </option>
                <option value="basic" data-price={pricesForJS.basic}>
                  {showcasePackages.basic.title} - {showcasePackages.basic.price}
                </option>
                <option value="premium" data-price={pricesForJS.premium}>
                  {showcasePackages.premium.title} - {showcasePackages.premium.price}
                </option>
                <option value="not_sure">
                  {lang === "fr" ? "Je ne sais pas encore" : 
                   lang === "en" ? "I don't know yet" : 
                   "Ich weiß es noch nicht"}
                </option>
              </select>
            </div>

            <!-- Délai -->
            <div>
              <label for="deadline" class="block mb-1 font-medium">{t.deadlineLabel}</label>
              <select
                id="deadline"
                name="deadline"
                class="w-full p-2 border border-form bg-primary rounded-md"
              >
                <option value="medium" selected>{t.deadlineOptions.medium}</option>
                <option value="urgent">{t.deadlineOptions.urgent}</option>
                <option value="flexible">{t.deadlineOptions.flexible}</option>
              </select>
            </div>

            <!-- Description du projet -->
            <div>
              <label for="project_description" class="block mb-1 font-medium">{t.projectDescLabel} *</label>
              <textarea
                id="project_description"
                name="project_description"
                class="w-full p-2 border border-form bg-primary rounded-md h-32"
                placeholder={t.projectDescPlaceholder}
                required
              ></textarea>
            </div>
          </div>

          <!-- Section Options -->
          <div class="bg-secondary bg-opacity-20 p-5 rounded-lg space-y-4">
            <h2 class="text-xl font-semibold text-accent mb-3">
              {lang === "fr" ? "Options supplémentaires" : 
               lang === "en" ? "Additional options" : 
               "Zusätzliche Optionen"}
            </h2>

            <div class="space-y-3">
              {additionalOptions.map((option: any, index: number) => (
                <div class="option-item">
                  <input
                    type="checkbox"
                    id={`option_${index}`}
                    name="options"
                    value={option.title}
                    class="option-checkbox"
                    data-price={option.priceValue}
                  />
                  <label for={`option_${index}`}>
                    <span class="option-title">
                      {option.title} - {option.price}
                    </span>
                    <span class="text-sm text-text-muted">
                      {option.description}
                    </span>
                  </label>
                </div>
              ))}
            </div>

            <!-- Informations complémentaires -->
            <div class="mt-4">
              <label for="additional_info" class="block mb-1 font-medium">{t.additionalInfoLabel}</label>
              <textarea
                id="additional_info"
                name="additional_info"
                class="w-full p-2 border border-form bg-primary rounded-md h-24"
                placeholder={t.additionalInfoPlaceholder}
              ></textarea>
            </div>
          </div>

          <!-- Estimation du prix total avec animations CSS -->
          <div class="bg-secondary bg-opacity-30 p-5 rounded-lg space-y-2 mt-4 price-estimate-section">
            <h2 class="text-xl font-semibold text-accent">
              {lang === "fr" ? "Estimation du prix" : 
               lang === "en" ? "Price estimate" : 
               "Preisschätzung"}
            </h2>

            <div class="price-row">
              <div>
                <span class="font-medium">
                  {lang === "fr" ? "Formule choisie:" : 
                   lang === "en" ? "Selected package:" : 
                   "Ausgewähltes Paket:"}
                </span>
                <span id="selected-package-label" class="ml-2"></span>
              </div>
              <span id="package-price" class="font-medium"></span>
            </div>

            <div id="selected-options-container" class="hidden">
              <div class="font-medium mb-1">
                {lang === "fr" ? "Options sélectionnées:" : 
                 lang === "en" ? "Selected options:" : 
                 "Ausgewählte Optionen:"}
              </div>
              <ul id="selected-options-list" class="list-disc pl-5 text-sm"></ul>
            </div>

            <div class="border-t border-accent border-opacity-30 my-2 pt-2 price-row">
              <div class="font-bold">
                {lang === "fr" ? "Total estimé:" : 
                 lang === "en" ? "Estimated total:" : 
                 "Geschätzte Summe:"}
              </div>
              <div id="total-price" class="text-accent text-xl font-bold"></div>
            </div>

            <div class="text-xs italic text-text-muted mt-2">
              {lang === "fr" ? "Note: Cette estimation est indicative. Le prix final pourra varier selon les spécificités de votre projet." : 
               lang === "en" ? "Note: This estimate is based on standard options. The final price may vary depending on the specifics of your project and the graphic assets to be created." : 
               "Hinweis: Diese Schätzung basiert auf Standardoptionen. Der endgültige Preis kann je nach Besonderheiten Ihres Projekts und den zu erstellenden Grafikressourcen variieren."}
            </div>
          </div>

          <!-- Champ honeypot pour éviter le spam -->
          <div class="hidden">
            <input type="text" name="botcheck" />
          </div>

          <!-- Bouton d'envoi -->
          <div class="flex justify-end pr-2 gap-4">
            <span
              id="form-spinner"
              style="display: none;"
              class="inline-flex items-center"
            >
              <svg
                class="animate-spin -ml-1 mr-2 h-4 w-4 text-accent"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                ></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              {t.submitting}
            </span>
            <button type="submit" class="cta-button" id="submit-button">
              {t.submitButton}
            </button>
          </div>

          <!-- Conteneur pour les messages de feedback -->
          <div id="form-messages" class="mt-4"></div>
        </form>
      </div>

      <!-- Colonne droite: Formules et options incluses (visible uniquement sur desktop) -->
      <div class="hidden md:block md:w-1/3">
        <div class="bg-secondary bg-opacity-30 p-5 rounded-lg mb-6">
          <h2 class="text-xl font-semibold mb-4 text-accent">
            {lang === "fr" ? "Mes formules de sites internet" : 
             lang === "en" ? "My showcase website packages" : 
             "Meine Präsentationswebsite-Pakete"}
          </h2>

          <div class="space-y-4">
            <!-- Standard (mis en premier car plus populaire) -->
            <div class="p-3 border-2 border-accent rounded-lg transform scale-105 relative">
              <div class="font-semibold text-accent mb-1">
                {showcasePackages.standard.title} - {showcasePackages.standard.price}
              </div>
              <ul class="list-disc pl-5 text-sm">
                {showcasePackages.standard.features.map((feature: string) => <li>{feature}</li>)}
              </ul>
            </div>

            <!-- Basic -->
            <div class="p-3 border border-accent border-opacity-30 rounded-lg">
              <div class="font-semibold text-accent mb-1">
                {showcasePackages.basic.title} - {showcasePackages.basic.price}
              </div>
              <ul class="list-disc pl-5 text-sm">
                {showcasePackages.basic.features.map((feature: string) => <li>{feature}</li>)}
              </ul>
            </div>

            <!-- Premium -->
            <div class="p-3 border border-accent border-opacity-30 rounded-lg">
              <div class="font-semibold text-accent mb-1">
                {showcasePackages.premium.title} - {showcasePackages.premium.price}
              </div>
              <ul class="list-disc pl-5 text-sm">
                {showcasePackages.premium.features.map((feature: string) => <li>{feature}</li>)}
              </ul>
            </div>
          </div>

          <div class="mt-6 p-3 bg-secondary bg-opacity-50 rounded-lg">
            <h3 class="font-semibold text-accent mb-2 text-sm">
              {lang === "fr" ? "Tous les forfaits incluent :" : 
               lang === "en" ? "All packages include:" : 
               "Alle Pakete beinhalten:"}
            </h3>
            <ul class="list-disc pl-5 text-sm">
              {includedInAllPackages.map((feature: string) => <li>{feature}</li>)}
            </ul>
            <p class="mt-2 text-xs italic">
              {lang === "fr" ? "Vous n'avez qu'à acheter un nom de domaine (à partir de 10-15€/an) : je m'occupe du reste." : 
               lang === "en" ? "You only need to buy a domain name (from €10-15/year): I take care of the rest." : 
               "Sie müssen nur einen Domainnamen kaufen (ab 10-15€/Jahr): Um alles andere kümmere ich mich."}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <style>
    /* CSS pour les options et le calcul dynamique */

    /* Animation douce pour l'affichage/masquage des options */
    .option-details {
      max-height: 0;
      overflow: hidden;
      opacity: 0;
      transition:
        max-height 0.3s ease-out,
        opacity 0.3s ease-out,
        margin 0.3s ease-out;
    }

    input[type="checkbox"]:checked ~ .option-details {
      max-height: 200px; /* Valeur arbitraire, doit être suffisamment grande */
      opacity: 1;
      margin-top: 8px;
    }

    /* Style pour la section d'estimation de prix */
    .price-estimate-section {
      transition: opacity 0.3s ease-out;
    }

    .price-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 4px;
    }

    .selected-option {
      animation: fadeIn 0.3s ease-out;
    }
  </style>
</Layout>

<script define:vars={{ clientTranslations, pricesForJS }}>
  document.addEventListener("DOMContentLoaded", initPriceCalculator);
  document.addEventListener("astro:page-load", initPriceCalculator);

  function initPriceCalculator() {
    try {
      // Version ultra-simplifiée du calculateur
      const form = document.getElementById("quote-form");
      const packageSelect = document.getElementById("service_package");
      const optionCheckboxes = document.querySelectorAll(".option-checkbox");
      const totalPriceElement = document.getElementById("total-price");
      const selectedPackageLabel = document.getElementById("selected-package-label");
      const packagePriceElement = document.getElementById("package-price");
      const selectedOptionsList = document.getElementById("selected-options-list");
      const selectedOptionsContainer = document.getElementById("selected-options-container");

      // Vérification des éléments essentiels
      if (!packageSelect || !totalPriceElement) return;

      // Utiliser les prix depuis la configuration centralisée
      const prices = {
        basic: pricesForJS.basic,
        standard: pricesForJS.standard,
        premium: pricesForJS.premium,
        not_sure: 0,
        // Les options utilisent les prix depuis la configuration
        ...Object.keys(pricesForJS).filter(key => key.startsWith('option_')).reduce((acc, key) => {
          acc[key] = pricesForJS[key];
          return acc;
        }, {})
      };

      // Noms des packages pour affichage
      const packageNames = {
        basic: "Site Une Page",
        standard: "Site Multi-pages",
        premium: "Site Complet",
        not_sure: "À définir",
      };

      function updatePrice() {
        try {
          // Obtenir le type et prix du package
          let packageType = packageSelect.value || "standard";
          let basePrice = prices[packageType] || 0;
          let packageName = packageNames[packageType] || packageType;

          // Mise à jour du nom et prix du package
          if (selectedPackageLabel)
            selectedPackageLabel.textContent = packageName;
          if (packagePriceElement)
            packagePriceElement.textContent =
              packageType !== "not_sure" ? basePrice + " €" : "À définir";

          // Calculer les options
          let optionsTotal = 0;
          let hasOptions = false;

          // Mémoriser les options actuellement affichées
          const existingOptions = new Set();
          if (selectedOptionsList) {
            Array.from(selectedOptionsList.children).forEach((li) => {
              existingOptions.add(li.getAttribute("data-option-id"));
            });
          }

          // Collecter les options sélectionnées
          const selectedOptions = new Set();
          optionCheckboxes.forEach((checkbox, index) => {
            if (checkbox.checked) {
              hasOptions = true;
              const optionId = checkbox.id || `option_${index}`;
              selectedOptions.add(optionId);

              // Calculer le prix
              const optionPrice = parseInt(checkbox.getAttribute('data-price')) || 0;
              optionsTotal += optionPrice;
            }
          });

          // Gérer l'affichage des options
          if (selectedOptionsList) {
            // Supprimer les options qui ne sont plus sélectionnées
            Array.from(selectedOptionsList.children).forEach((li) => {
              const optionId = li.getAttribute("data-option-id");
              if (!selectedOptions.has(optionId)) {
                li.remove();
              }
            });

            // Ajouter uniquement les nouvelles options avec animation
            optionCheckboxes.forEach((checkbox, index) => {
              if (checkbox.checked) {
                const optionId = checkbox.id || `option_${index}`;

                // Vérifier si cette option est déjà affichée
                if (!existingOptions.has(optionId)) {
                  // C'est une nouvelle option, l'ajouter avec animation
                  let optionLabel = "Option";
                  if (checkbox.nextElementSibling) {
                    const titleElement =
                      checkbox.nextElementSibling.querySelector(
                        ".option-title"
                      );
                    if (titleElement && titleElement.textContent) {
                      optionLabel = titleElement.textContent;
                    }
                  }

                  const li = document.createElement("li");
                  li.textContent = optionLabel;
                  li.setAttribute("data-option-id", optionId);
                  li.classList.add("option-fade-in");
                  selectedOptionsList.appendChild(li);
                }
              }
            });
          }

          // Afficher/masquer la zone des options sélectionnées
          if (selectedOptionsContainer) {
            if (hasOptions) {
              selectedOptionsContainer.classList.remove("hidden");
            } else {
              selectedOptionsContainer.classList.add("hidden");
            }
          }

          // Mise à jour du prix total
          const total = basePrice + optionsTotal;
          if (totalPriceElement) {
            // Vérifier si le prix a changé avant d'animer
            const newPriceText =
              packageType !== "not_sure" ? total + " €" : "À définir";
            if (totalPriceElement.textContent !== newPriceText) {
              totalPriceElement.textContent = newPriceText;
              totalPriceElement.classList.add("price-flash");
              setTimeout(() => {
                totalPriceElement.classList.remove("price-flash");
              }, 700);
            } else {
              totalPriceElement.textContent = newPriceText;
            }
          }
        } catch (e) {
          console.log("Erreur calcul:", e);
          if (totalPriceElement)
            totalPriceElement.textContent = "Erreur de calcul";
        }
      }

      // Premier calcul au chargement
      updatePrice();

      // Écouteurs d'événements avec une approche différente
      if (packageSelect) {
        packageSelect.onchange = updatePrice;
      }

      optionCheckboxes.forEach(function (checkbox) {
        checkbox.onclick = updatePrice;
      });

      // Gestion du type de projet "Autre"
      const projectTypeSelect = document.getElementById("project_type");
      const additionalInfoDiv = document.querySelector('textarea[name="additional_info"]').parentElement;

      function handleProjectTypeChange() {
        const isOtherSelected = projectTypeSelect.value === "other";
        
        if (isOtherSelected) {
          // Créer le champ "Précisez votre besoin" s'il n'existe pas
          let specifyField = document.getElementById("specify_need");
          if (!specifyField) {
            const specifyDiv = document.createElement("div");
            specifyDiv.innerHTML = `
              <label for="specify_need" class="block mb-1 font-medium">${clientTranslations.specifyNeed}</label>
              <textarea
                id="specify_need"
                name="specify_need"
                class="w-full p-2 border border-form bg-primary rounded-md h-24"
                placeholder="${clientTranslations.specifyNeedPlaceholder}"
                required
              ></textarea>
            `;
            additionalInfoDiv.parentElement.insertBefore(specifyDiv, additionalInfoDiv);
          }
        } else {
          // Supprimer le champ "Précisez votre besoin"
          const specifyField = document.getElementById("specify_need");
          if (specifyField) {
            specifyField.parentElement.remove();
          }
        }
      }

      if (projectTypeSelect) {
        projectTypeSelect.addEventListener("change", handleProjectTypeChange);
      }

      // Gestion de la soumission du formulaire
      if (form) {
        form.addEventListener("submit", async function(e) {
          e.preventDefault();
          
          const submitButton = document.getElementById("submit-button");
          const spinner = document.getElementById("form-spinner");
          const messagesDiv = document.getElementById("form-messages");
          
          if (submitButton) submitButton.style.display = "none";
          if (spinner) spinner.style.display = "inline-flex";
          
          try {
            const formData = new FormData(form);
            
            const response = await fetch("https://api.web3forms.com/submit", {
              method: "POST",
              body: formData
            });
            
            if (response.ok) {
              if (messagesDiv) {
                messagesDiv.innerHTML = `
                  <div class="p-4 bg-green-500 bg-opacity-20 border border-green-500 rounded-md">
                    <p class="text-green-400">${clientTranslations.successMessage}</p>
                  </div>
                `;
              }
              form.reset();
              updatePrice(); // Remettre à zéro le calcul de prix
            } else {
              throw new Error("Erreur de soumission");
            }
          } catch (error) {
            if (messagesDiv) {
              messagesDiv.innerHTML = `
                <div class="p-4 bg-red-500 bg-opacity-20 border border-red-500 rounded-md">
                  <p class="text-red-400">${clientTranslations.errorMessage}</p>
                </div>
              `;
            }
          } finally {
            if (submitButton) submitButton.style.display = "inline-block";
            if (spinner) spinner.style.display = "none";
          }
        });
      }

    } catch (e) {
      console.log("Erreur initialisation globale:", e);
    }
  }
</script>
</Layout>
---
// src/pages/[lang]/[slug].astro
import { getCollection, render } from "astro:content";
import { Picture } from "astro:assets";
import Layout from "../../layouts/layout.astro";
import CtaDispo from "../../components/cta_dispo.astro";
import { marked } from 'marked';

type Lang = 'fr' | 'en' | 'de';

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  const langs = ["fr", "en", "de"];

  return langs.flatMap((lang) =>
    projects.map((project) => ({
      params: {
        lang,
        slug: project.data.slug,
      },
      props: { project, lang },
    }))
  );
}

const { project, lang } = Astro.props;

// Fonction simple pour charger les images basées sur le nom du slug
async function loadImagesBySlug(slug: string) {
  let heroImage: any = null;
  
  // Essayer différents formats pour l'image hero (00)
  const formats = ['png', 'jpg', 'jpeg', 'webp'];
  for (const format of formats) {
    try {
      const img = await import(`../../assets/projects/${slug}00.${format}`);
      heroImage = img.default;
      break;
    } catch {
      continue;
    }
  }
  
  // Charger les images de galerie (01, 02, 03...)
  const galleryImages: any[] = [];
  for (let i = 1; i <= 20; i++) {
    const paddedIndex = i.toString().padStart(2, '0');
    let found = false;
    
    for (const format of formats) {
      try {
        const img = await import(`../../assets/projects/${slug}${paddedIndex}.${format}`);
        galleryImages.push(img.default);
        found = true;
        break;
      } catch {
        continue;
      }
    }
    
    if (!found) break; // Plus d'images séquentielles
  }
  
  return { heroImage, galleryImages };
}

// Fonction pour extraire le contenu selon la langue
const getContentForLang = (body: string, currentLang: string): string => {
  if (!body || !body.includes('---lang:')) {
    return body || '';
  }
  
  const sections = body.split(/---lang:([a-z]{2})---/);
  
  if (currentLang === 'fr') {
    return sections[0]?.trim() || '';
  }
  
  for (let i = 1; i < sections.length; i += 2) {
    if (sections[i] === currentLang) {
      return sections[i + 1]?.trim() || '';
    }
  }
  
  return sections[0]?.trim() || '';
};

// Récupérer et compiler le contenu pour la langue courante
const rawContent = getContentForLang(project.body || '', lang);
const htmlContent = marked(rawContent);

// Navigation
const navContent = {
  fr: { 
    allProjects: "Tous les projets", 
    nextProject: "Projet suivant", 
    prevProject: "Projet précédent", 
    visitSite: "Visiter le site web", 
    viewSourceCode: "Voir le code source", 
    viewFrontendCode: "Repo Frontend", 
    viewBackendCode: "Repo Backend", 
    techTitle: "Technologies utilisées", 
    collaboratorRole: "En collaboration avec" 
  },
  en: { 
    allProjects: "All projects", 
    nextProject: "Next project", 
    prevProject: "Previous project", 
    visitSite: "Visit the website", 
    viewSourceCode: "View source code", 
    viewFrontendCode: "Frontend Repo", 
    viewBackendCode: "Backend Repo", 
    techTitle: "Technologies used", 
    collaboratorRole: "In collaboration with" 
  },
  de: { 
    allProjects: "Alle Projekte", 
    nextProject: "Nächstes Projekt", 
    prevProject: "Vorheriges Projekt", 
    visitSite: "Website besuchen", 
    viewSourceCode: "Quellcode ansehen", 
    viewFrontendCode: "Frontend Repo", 
    viewBackendCode: "Backend Repo", 
    techTitle: "Verwendete Technologien", 
    collaboratorRole: "In Zusammenarbeit mit" 
  }
};

const t = navContent[lang as keyof typeof navContent] || navContent.fr;

// Navigation entre projets - CORRIGÉE
const allProjects = await getCollection("projects");
// Trier par ordre chronologique (1 = plus ancien, 3 = plus récent)
const sortedProjects = allProjects.sort((a, b) => a.data.order - b.data.order);
const currentIndex = sortedProjects.findIndex(p => p.data.slug === project.data.slug);

// Précédent = plus ancien (index - 1), Suivant = plus récent (index + 1)
const prevProject = currentIndex > 0 ? sortedProjects[currentIndex - 1] : null;
const nextProject = currentIndex < sortedProjects.length - 1 ? sortedProjects[currentIndex + 1] : null;

// Charger les images automatiquement
const { heroImage, galleryImages } = await loadImagesBySlug(project.data.slug);
const collaborators = project.data.collaborators || [];
---

<Layout 
  title={`${project.data.title[lang]} | Josselin HANEL`} 
  description={project.data.description[lang]} 
  lang={lang}
>
  <div class="container mx-auto px-4 py-8">
    <!-- Navigation retour -->
    <div class="mb-4">
      <a
        href={`/${lang}/projects/`}
        class="text-text-muted hover:text-accent transition-colors"
      >
        &larr; {t.allProjects}
      </a>
    </div>

    <!-- En-tête du projet -->
    <header class="mb-10">
      <h1 class="text-3xl font-bold mb-6 border-b border-accent pb-2">
        {project.data.title[lang]} ({project.data.year})
      </h1>

      <!-- Collaborateurs si présents -->
      {
        collaborators.length > 0 && (
          <div class="mb-4">
            <p class="text-text-muted">
              {t.collaboratorRole}{" "}
              {collaborators.map((collab, index) => (
                <>
                  {collab.url ? (
                    <a
                      href={collab.url}
                      target="_blank"
                      rel="noopener"
                      class="text-accent hover:text-accent-hover"
                    >
                      {collab.name}
                    </a>
                  ) : (
                    <span class="text-accent">{collab.name}</span>
                  )}
                  {collab.role?.[lang] && (
                    <span class="text-text-muted"> ({collab.role[lang]})</span>
                  )}
                  {index < collaborators.length - 1 && ", "}
                </>
              ))}
            </p>
          </div>
        )
      }
    </header>

    <!-- Image principale du projet -->
    {heroImage && (
      <div class="mb-10 bg-secondary bg-opacity-30 p-4 rounded-lg">
        <Picture
          src={heroImage}
          widths={[800, 1200, 1600]}
          formats={["avif", "webp", "jpg"]}
          alt={project.data.title[lang]}
          class="w-full rounded-lg"
        />
      </div>
    )}

    <!-- Actions principales -->
    <section class="mb-10">
      <div class="flex flex-wrap gap-4 mb-8">
        {
          project.data.links?.website && (
            <a
              href={project.data.links.website}
              target="_blank"
              rel="noopener noreferrer"
              class="cta-button"
            >
              {t.visitSite}
            </a>
          )
        }

        {
          project.data.links?.github && (
            <a
              href={project.data.links.github}
              target="_blank"
              rel="noopener noreferrer"
              class="btn-secondary"
            >
              {t.viewSourceCode}
            </a>
          )
        }

        {
          project.data.links?.githubFrontend && (
            <a
              href={project.data.links.githubFrontend}
              target="_blank"
              rel="noopener noreferrer"
              class="btn-secondary"
            >
              {t.viewFrontendCode}
            </a>
          )
        }

        {
          project.data.links?.githubBackend && (
            <a
              href={project.data.links.githubBackend}
              target="_blank"
              rel="noopener noreferrer"
              class="btn-secondary"
            >
              {t.viewBackendCode}
            </a>
          )
        }
      </div>
    </section>

    <!-- Contenu du projet dans la langue sélectionnée -->
    <div class="mb-10 max-w-4xl [&>h1]:text-3xl [&>h1]:font-bold [&>h1]:text-accent [&>h1]:mb-4 [&>h1]:mt-8 [&>h1]:border-b [&>h1]:border-accent [&>h1]:pb-2 [&>h2]:text-2xl [&>h2]:font-bold [&>h2]:text-accent [&>h2]:mb-3 [&>h2]:mt-6 [&>h2]:border-b [&>h2]:border-accent [&>h2]:pb-2 [&>h3]:text-xl [&>h3]:font-semibold [&>h3]:text-accent [&>h3]:mb-2 [&>h3]:mt-4 [&>h4]:text-lg [&>h4]:font-medium [&>h4]:mb-2 [&>h4]:mt-3 [&>p]:mb-4 [&>p]:leading-relaxed [&>strong]:font-semibold [&>strong]:text-accent [&>ul]:list-disc [&>ul]:pl-6 [&>ul]:mb-4 [&>ul]:space-y-2 [&>ol]:list-decimal [&>ol]:pl-6 [&>ol]:mb-4 [&>ol]:space-y-2 [&>li]:leading-relaxed" set:html={htmlContent}>
    </div>

    <!-- Images de galerie si présentes -->
    {
      galleryImages.length > 0 && (
        <section class="mb-10">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {galleryImages.map((image, index) => (
              <div class="bg-secondary bg-opacity-30 p-2 rounded-lg">
                <Picture
                  src={image}
                  widths={[400, 600, 900]}
                  formats={["avif", "webp", "jpg"]}
                  alt={`${project.data.title[lang]} - Image ${index + 1}`}
                  class="w-full h-full object-cover rounded-lg"
                  loading="lazy"
                />
              </div>
            ))}
          </div>
        </section>
      )
    }

    <!-- Technologies utilisées -->
    <section class="mb-16">
      <h2 class="text-2xl font-bold mb-4 text-accent">
        {t.techTitle}
      </h2>
      <div class="flex flex-wrap gap-2 mb-6">
        {
          project.data.tech.map((tech) => (
            <span class="px-3 py-1 bg-accent bg-opacity-20 rounded-full transition-all hover:bg-opacity-40">
              {tech}
            </span>
          ))
        }
      </div>
    </section>

    <!-- Navigation entre projets -->
    <div class="border-t border-secondary pt-8 mt-12 flex justify-between">
      {
        prevProject ? (
          <a href={`/${lang}/${prevProject.data.slug}/`} class="btn-secondary">
            &larr; {t.prevProject}: {prevProject.data.title[lang]}
          </a>
        ) : (
          <div />
        )
      }

      {
        nextProject && (
          <a href={`/${lang}/${nextProject.data.slug}/`} class="btn-secondary">
            {t.nextProject}: {nextProject.data.title[lang]} &rarr;
          </a>
        )
      }
    </div>

    <!-- CTA de contact -->
    <CtaDispo />
  </div>
</Layout>
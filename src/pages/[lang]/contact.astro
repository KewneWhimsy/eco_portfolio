---
// Import du layout standard
import Layout from '../../layouts/layout.astro';

// Récupérer le paramètre de langue depuis l'URL
export function getStaticPaths() {
  return [
    { params: { lang: 'fr' } },
    { params: { lang: 'en' } },
    { params: { lang: 'de' } }
  ];
}

const lang = Astro.params.lang as 'fr' | 'en' | 'de';

// Contenu traduit pour chaque langue
const content = {
  fr: {
    title: 'Josselin HANEL - Contact',
    description: 'Contactez-moi pour discuter de vos projets web éco-responsables ou pour toute question.',
    contactTitle: 'Me contacter',
    contactIntro: "Vous avez un projet en tête ? Vous souhaitez en savoir plus sur l'éco-conception web ? N'hésitez pas à me contacter via le formulaire ci-dessous.",
    nameLabel: 'Votre nom',
    emailLabel: 'Votre email',
    subjectLabel: 'Sujet',
    messageLabel: 'Message',
    submitButton: 'Envoyer',
    namePlaceholder: 'Entrez votre nom complet',
    emailPlaceholder: 'votre.email@exemple.com',
    subjectPlaceholder: 'Objet de votre message',
    messagePlaceholder: 'Écrivez votre message ici...',
    preferredContactLabel: 'Méthode de contact préférée',
    emailOption: 'Email',
    phoneOption: 'Téléphone',
    phoneLabel: 'Votre numéro de téléphone (optionnel)',
    phonePlaceholder: '+33 6 12 34 56 78',
    availabilityTitle: 'Disponibilité',
    availabilityText: 'Je suis actuellement disponible pour des missions à Rennes, Berlin ou en télétravail.',
    followMe: 'Me suivre',
    submitting: 'Envoi en cours...',
    successMessage: 'Merci ! Votre message a été envoyé avec succès.',
    errorMessage: 'Une erreur est survenue. Veuillez réessayer.',
    requiredField: 'Ce champ est requis'
  },
  en: {
    title: 'Josselin HANEL - Contact',
    description: 'Contact me to discuss your eco-friendly web projects or for any questions.',
    contactTitle: 'Contact me',
    contactIntro: "Do you have a project in mind? Would you like to know more about eco-friendly web design? Feel free to contact me via the form below.",
    nameLabel: 'Your name',
    emailLabel: 'Your email',
    subjectLabel: 'Subject',
    messageLabel: 'Message',
    submitButton: 'Send',
    namePlaceholder: 'Enter your full name',
    emailPlaceholder: 'your.email@example.com',
    subjectPlaceholder: 'Subject of your message',
    messagePlaceholder: 'Write your message here...',
    preferredContactLabel: 'Preferred contact method',
    emailOption: 'Email',
    phoneOption: 'Phone',
    phoneLabel: 'Your phone number (optional)',
    phonePlaceholder: '+33 6 12 34 56 78',
    availabilityTitle: 'Availability',
    availabilityText: 'I am currently available for work in Rennes(France), Berlin or remote work.',
    followMe: 'Follow me',
    submitting: 'Sending...',
    successMessage: 'Thank you! Your message has been sent successfully.',
    errorMessage: 'An error occurred. Please try again.',
    requiredField: 'This field is required'
  },
  de: {
    title: 'Josselin HANEL - Kontakt',
    description: 'Kontaktieren Sie mich, um über Ihre umweltfreundlichen Webprojekte zu sprechen oder für Fragen.',
    contactTitle: 'Kontaktieren Sie mich',
    contactIntro: "Haben Sie ein Projekt im Sinn oder möchten Sie mehr über umweltfreundliches Webdesign erfahren? Kontaktieren Sie mich gerne über das Formular unten.",
    nameLabel: 'Ihr Name',
    emailLabel: 'Ihre E-Mail',
    subjectLabel: 'Betreff',
    messageLabel: 'Nachricht',
    submitButton: 'Senden',
    namePlaceholder: 'Geben Sie Ihren vollständigen Namen ein',
    emailPlaceholder: 'ihre.email@beispiel.com',
    subjectPlaceholder: 'Betreff Ihrer Nachricht',
    messagePlaceholder: 'Schreiben Sie Ihre Nachricht hier...',
    preferredContactLabel: 'Bevorzugte Kontaktmethode',
    emailOption: 'E-Mail',
    phoneOption: 'Telefon',
    phoneLabel: 'Ihre Telefonnummer (optional)',
    phonePlaceholder: '+33 6 12 34 56 78',
    availabilityTitle: 'Verfügbarkeit',
    availabilityText: 'Ich bin derzeit verfügbar für Arbeit in Rennes(Frankreich), Berlin oder für Remote-Arbeit.',
    followMe: 'Folgen Sie mir',
    submitting: 'Senden...',
    successMessage: 'Vielen Dank! Ihre Nachricht wurde erfolgreich gesendet.',
    errorMessage: 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es erneut oder kontaktieren Sie mich direkt per E-Mail.',
    requiredField: 'Dieses Feld ist erforderlich'
  }
};

// Utiliser la langue demandée ou français par défaut
const t = content[lang] || content.fr;

// Liens de réseaux sociaux
const socialLinks = [
  { name: 'GitHub', url: 'https://github.com/KewneWhimsy', icon: 'github' },
  { name: 'LinkedIn', url: 'https://www.linkedin.com/in/josselin-hanel-030a8a358/', icon: 'linkedin' },
];
---

<Layout title={t.title} description={t.description} lang={lang}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 border-b border-accent pb-2">
      {t.contactTitle}
    </h1>
    
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Formulaire de contact -->
      <div class="md:w-2/3">
        <p class="mb-6">
          {t.contactIntro}
        </p>
        
        <form id="contact-form" class="space-y-4">
          <!-- Clé API Web3Forms (sera ajoutée en JS) -->
          
          <!-- Champ nom -->
          <div>
            <label for="name" class="block mb-1 font-medium">{t.nameLabel} *</label>
            <input 
              type="text" 
              id="name" 
              name="name"
              class="w-full p-2 border border-form bg-primary rounded-md"
              placeholder={t.namePlaceholder}
              required
            />
          </div>
          
          <!-- Champ email -->
          <div>
            <label for="email" class="block mb-1 font-medium">{t.emailLabel} *</label>
            <input 
              type="email" 
              id="email" 
              name="email"
              class="w-full p-2 border border-form bg-primary rounded-md"
              placeholder={t.emailPlaceholder}
              required
            />
          </div>
          
          <!-- Méthode de contact préférée -->
          <div>
            <label class="block mb-1 font-medium">{t.preferredContactLabel}</label>
            <div class="flex gap-4">
              <label class="flex items-center">
                <input type="radio" name="contactMethod" value="email" checked>
                <span class="ml-2">{t.emailOption}</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="contactMethod" value="phone">
                <span class="ml-2">{t.phoneOption}</span>
              </label>
            </div>
          </div>
          
          <!-- Champ téléphone (conditionnel) -->
          <div id="phone-field" class="phone-field">
            <label for="phone" class="block mb-1 font-medium">{t.phoneLabel}</label>
            <input 
              type="tel" 
              id="phone" 
              name="phone"
              class="w-full p-2 border border-form bg-primary rounded-md"
              placeholder={t.phonePlaceholder}
            />
          </div>
          
          <!-- Champ sujet -->
          <div>
            <label for="subject" class="block mb-1 font-medium">{t.subjectLabel} *</label>
            <input 
              type="text" 
              id="subject"
              name="subject" 
              class="w-full p-2 border border-form bg-primary rounded-md"
              placeholder={t.subjectPlaceholder}
              required
            />
          </div>
          
          <!-- Champ message -->
          <div>
            <label for="message" class="block mb-1 font-medium">{t.messageLabel} *</label>
            <textarea 
              id="message"
              name="message" 
              class="w-full p-2 border border-form bg-primary rounded-md h-32"
              placeholder={t.messagePlaceholder}
              required
            ></textarea>
          </div>
          
          <!-- Bouton d'envoi -->
          <div class="flex justify-end gap-4">
            <button 
              type="submit"
              class="cta-button"
              id="submit-button"
            >
              {t.submitButton}
            </button>
            <span id="form-spinner" style="display: none;" class="inline-flex items-center">
              <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-accent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </span>
          </div>
          
          <!-- Conteneur pour les messages de feedback -->
          <div id="form-messages" class="mt-4"></div>
        </form>
      </div>
      
      <!-- Informations de contact -->
      <div class="md:w-1/3 bg-secondary bg-opacity-30 p-6 rounded-lg">
        <h2 class="text-xl font-semibold mb-4 text-accent">{t.availabilityTitle}</h2>
        <p class="mb-6">
          {t.availabilityText}
        </p>
        
        <div>
          <h3 class="font-medium mb-2">{t.followMe}</h3>
          <div class="flex gap-4">
            {socialLinks.map(link => (
              <a 
                href={link.url} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="text-text-muted transition-colors"
                aria-label={link.name}
              >
                <span>{link.name}</span>
              </a>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Animation pour le champ téléphone */
  .phone-field {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: max-height 0.3s ease-out, opacity 0.3s ease-out, margin 0.3s ease-out;
    margin: 0;
  }
  
  .phone-field.show {
    max-height: 80px; /* Ajuster selon la hauteur réelle */
    opacity: 1;
    margin: 1rem 0;
  }
</style>

<script define:vars={{ successMessage: t.successMessage, errorMessage: t.errorMessage, submittingMessage: t.submitting }}>
  document.addEventListener('astro:page-load', function() {
    // Animation du champ téléphone
    const radioButtons = document.querySelectorAll('input[name="contactMethod"]');
    const phoneField = document.getElementById('phone-field');
    
    if (phoneField) {
      // Vérification initiale
      const phoneRadio = document.querySelector('input[name="contactMethod"][value="phone"]');
      if (phoneRadio && phoneRadio.checked) {
        phoneField.classList.add('show');
      }
      
      // Événement de changement
      radioButtons.forEach(button => {
        button.addEventListener('change', function() {
          if (this.value === 'phone') {
            phoneField.classList.add('show');
          } else {
            phoneField.classList.remove('show');
          }
        });
      });
    }
    
    // Gestion du formulaire de contact
    const form = document.getElementById('contact-form');
    const formMessages = document.getElementById('form-messages');
    const submitButton = document.getElementById('submit-button');
    const formSpinner = document.getElementById('form-spinner');
    
    if (form && formMessages && submitButton && formSpinner) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Afficher l'indicateur de chargement
        submitButton.disabled = true;
        formSpinner.style.display = 'inline-block';
        formMessages.innerHTML = '';
        
        // Obtenir les données du formulaire
        const formData = new FormData(form);
        
        // Ajouter la clé API et autres champs nécessaires
        formData.append('access_key', '2dcc3f1b-036f-48a7-987a-cdada0d05ae5');
        formData.append('from_name', 'Portfolio Contact');
        formData.append('botcheck', ''); // Honeypot pour le spam
        
        // Envoyer la requête
        fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          // Masquer l'indicateur de chargement
          submitButton.disabled = false;
          formSpinner.style.display = 'none';
          
          // Vider d'abord le conteneur pour éviter les animations multiples
          formMessages.innerHTML = '';
          
          let messageText = data.success ? successMessage : errorMessage;
          
          // Créer l'élément de message
          const messageElement = document.createElement('div');
          messageElement.className = data.success ? 
            'p-3 bg-green-100/20 text-green-500 border border-green-500/30 rounded-md mt-4' : 
            'p-3 bg-red-100/20 text-red-500 border border-red-500/30 rounded-md mt-4';
          messageElement.textContent = messageText;
          messageElement.style.opacity = '0';
          messageElement.style.transform = 'translateY(-10px)';
          
          // Ajouter l'élément au DOM
          formMessages.appendChild(messageElement);
          
          // Animation manuelle avec JavaScript
          setTimeout(() => {
            messageElement.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
            messageElement.style.opacity = '1';
            messageElement.style.transform = 'translateY(0)';
          }, 10);
          
          if (data.success) {
            // Réinitialiser le formulaire
            form.reset();
            // Réinitialiser le champ téléphone
            phoneField.classList.remove('show');
          }
        })
        .catch(error => {
          // Masquer l'indicateur de chargement
          submitButton.disabled = false;
          formSpinner.style.display = 'none';
          
          // Vider d'abord le conteneur
          formMessages.innerHTML = '';
          
          // Créer l'élément de message d'erreur
          const messageElement = document.createElement('div');
          messageElement.className = 'p-3 bg-red-100/20 text-red-500 border border-red-500/30 rounded-md mt-4';
          messageElement.textContent = errorMessage;
          messageElement.style.opacity = '0';
          messageElement.style.transform = 'translateY(-10px)';
          
          // Ajouter le message au DOM
          formMessages.appendChild(messageElement);
          
          // Animation manuelle avec JavaScript
          setTimeout(() => {
            messageElement.style.transition = 'opacity 0.4s ease-out, transform 0.4s ease-out';
            messageElement.style.opacity = '1';
            messageElement.style.transform = 'translateY(0)';
          }, 10);
          
          console.error('Error:', error);
        });
      });
    }
  });
</script>
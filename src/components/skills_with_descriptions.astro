---
// src/components/skills_with_descriptions.astro

// Propriétés attendues
export interface Props {
  lang: 'fr' | 'en' | 'de';
  skills: Array<{
    category: string;
    items: string[];
  }>;
}

const { lang, skills } = Astro.props;

// Définition du type pour les descriptions
type DescriptionsByLang = {
  [lang: string]: {
    [skill: string]: string;
  };
};

// Définition des descriptions pour chaque technologie selon la langue
const descriptions: DescriptionsByLang = {
  fr: {
    // Frontend
    'Astro': 'Framework web agnostique générant principalement du HTML statique, offrant un excellent SEO naturel et des performances optimales sans imposer de choix technologiques.',
    'CSS Pro': 'Techniques CSS avancées pour un design responsive et des animations fluides, limitant le recours au JavaScript coûteux en ressources.',
    'TypeScript': 'Sur-ensemble typé de JavaScript pour un code plus robuste et maintenable, réduisant les erreurs et la dette technique.',
    'HTMX': 'Bibliothèque ultra-légère (~14kb) ajoutant des capacités AJAX et WebSocket directement au HTML. Un simple script suffit pour l\'intégrer à la volée quand le besoin s\'en fait sentir.',
    'Alpine.js': 'Micro-framework JavaScript qui brille précisément là où le CSS moderne ne suffit plus. Parfait pour gérer les états sans recourir à un framework lourd, tout en gardant une empreinte minimale.',
    'Tailwind': 'Framework CSS utilitaire qui facilite énormément le travail collaboratif et la gestion du responsive. Sa purge CSS en production garantit des feuilles de style ultra-optimisées.',
    
    // Backend
    'Express': 'Framework Node.js minimaliste, rapide à mettre en place et économe en ressources sous faible charge, idéal pour des APIs simples à moyennement complexes.',
    'WebSocket': 'Protocole de communication bidirectionnelle idéal pour les applications interactives, bien plus économe en ressources que les requêtes HTTP répétées.',
    'Elixir': 'Langage fonctionnel conçu pour la concurrence, offrant une meilleure scalabilité et performance que Node.js pour des charges importantes.',
    'Phoenix': 'Framework Elixir haute performance incluant LiveView, permettant de créer des interfaces temps réel sans JavaScript côté client.',
    
    // Bases de données
    'PostgreSQL': 'SGBD relationnel open-source puissant avec un écosystème d\'extensions quasi infini, offrant flexibilité et performances pour tout type de projet.',
    'MongoDB': 'Base de données NoSQL orientée documents permettant une flexibilité des données et des schémas adaptés aux besoins réels.',
    'PostgREST': 'Transforme une BDD Postgres en API REST instantanément. Idéal pour des CRUD simples et soulage le backend des tâches répétitives. Dans certains cas, permet même de se passer complètement de backend pour une communication front/BDD directe et sécurisée.',
    'Ecto': 'Bibliothèque Elixir pour l\'interaction avec les bases de données, optimisant les requêtes pour des performances maximales.',
    
    // Outils
    'Git': 'Essentiel pour tout développement collaboratif, permet de garder une trace claire des modifications et facilite les contributions simultanées sur un même projet.',
    'Docker': 'Assure une reproductibilité parfaite des environnements de dev entre les membres d\'une équipe. Docker Compose simplifie l\'orchestration de services multiples, et Swarm permet un déploiement scalable en production.',
    'VS Code': 'Éditeur de code moderne avec un bon équilibre entre légèreté et fonctionnalités. Son système d\'extensions permet de l\'adapter précisément à chaque projet.',
    'Lighthouse': 'Outil d\'audit essentiel pour mesurer et améliorer objectivement les performances web et l\'impact environnemental.',
    
    // Méthodologies
    'Accessibilité': 'Conception d\'interfaces compatibles avec tous les appareils, navigateurs et modes d\'utilisation. Élargit l\'audience potentielle et assure une expérience utilisateur inclusive.',
    'Performance': 'Optimisation qui réduit les temps de chargement et l\'utilisation des ressources. Une meilleure UX se traduit directement par une réduction des coûts d\'infrastructure et une augmentation des conversions.',
    'Éco-conception': 'Approche de développement visant à optimiser chaque étape du cycle de vie des services numériques, conciliant performance et sobriété.',
    'UX/UI': 'Interfaces intuitives qui répondent aux besoins réels des utilisateurs. Une bonne conception UX/UI réduit les frictions et améliore l\'engagement des utilisateurs.'
  },
  
  en: {
    // Frontend
    'Astro': 'Modern, framework-agnostic web builder generating mostly static HTML, providing excellent natural SEO and optimal performance without imposing technology choices.',
    'CSS Pro': 'Advanced CSS techniques for responsive design and smooth animations, reducing reliance on resource-intensive JavaScript.',
    'TypeScript': 'Typed superset of JavaScript for more robust and maintainable code, reducing errors and technical debt.',
    'HTMX': 'Ultra-lightweight library (~14kb) adding AJAX and WebSocket capabilities directly to HTML. A simple script is all it takes to integrate it on the fly when needed.',
    'Alpine.js': 'Micro JavaScript framework that shines precisely where modern CSS falls short. Perfect for state management without resorting to a heavy framework, while maintaining a minimal footprint.',
    'Tailwind': 'Utility CSS framework that greatly facilitates collaborative work and responsive design management. Its CSS purging in production guarantees ultra-optimized stylesheets.',
    
    // Backend
    'Express': 'Minimalist Node.js framework, quick to implement and resource-efficient under light loads, ideal for simple to moderately complex APIs.',
    'WebSocket': 'Bidirectional communication protocol ideal for interactive applications, much more resource-efficient than repeated HTTP requests.',
    'Elixir': 'Functional language designed for concurrency, offering better scalability and performance than Node.js for heavy workloads.',
    'Phoenix': 'High-performance Elixir framework featuring LiveView, enabling real-time interfaces without client-side JavaScript.',
    
    // Databases
    'PostgreSQL': 'Powerful open-source relational DBMS with an almost infinite ecosystem of extensions, offering flexibility and performance for any project type.',
    'MongoDB': 'NoSQL document database enabling data flexibility and schemas adapted to actual needs.',
    'PostgREST': 'Instantly transforms a Postgres DB into a REST API. Perfect for simple CRUD operations and relieves the backend of repetitive tasks. In some cases, even allows completely bypassing a backend for direct and secure front/DB communication.',
    'Ecto': 'Elixir library for database interaction, optimizing queries for maximum performance.',
    
    // Tools
    'Git': 'Essential for any collaborative development, maintains a clear record of changes and facilitates simultaneous contributions to the same project.',
    'Docker': 'Ensures perfect reproducibility of dev environments across team members. Docker Compose simplifies orchestration of multiple services, and Swarm enables scalable production deployment.',
    'VS Code': 'Modern code editor with a good balance between lightweight and features. Its extension system allows precise adaptation to each project.',
    'Lighthouse': 'Essential audit tool for objectively measuring and improving web performance and environmental impact.',
    
    // Methodologies
    'Accessibility': 'Designing interfaces compatible with all devices, browsers and usage modes. Expands potential audience and ensures an inclusive user experience.',
    'Performance': 'Optimization that reduces loading times and resource usage. Better UX directly translates to reduced infrastructure costs and increased conversions.',
    'Eco-design': 'Development approach aimed at optimizing each step of the digital service lifecycle, balancing performance and efficiency.',
    'UX/UI': 'Intuitive interfaces that meet the actual needs of users. Good UX/UI design reduces friction and improves user engagement.'
  },
  
  de: {
    // Frontend
    'Astro': 'Modernes, framework-agnostisches Web-Tool, das überwiegend statisches HTML generiert und hervorragende natürliche SEO und optimale Leistung bietet, ohne Technologieentscheidungen zu erzwingen.',
    'CSS Pro': 'Fortgeschrittene CSS-Techniken für responsive Designs und flüssige Animationen, die den Einsatz ressourcenintensiver JavaScript-Lösungen reduzieren.',
    'TypeScript': 'Typisierte Erweiterung von JavaScript für robusteren und wartbaren Code, reduziert Fehler und technische Schulden.',
    'HTMX': 'Ultraleichte Bibliothek (~14kb), die AJAX- und WebSocket-Funktionen direkt zum HTML hinzufügt. Ein einfaches Skript genügt, um es bei Bedarf im Flug zu integrieren.',
    'Alpine.js': 'Micro-JavaScript-Framework, das genau dort glänzt, wo modernes CSS nicht mehr ausreicht. Perfekt für Zustandsverwaltung ohne Rückgriff auf ein schweres Framework, bei minimalem Footprint.',
    'Tailwind': 'Utility-CSS-Framework, das die Zusammenarbeit und die Verwaltung von Responsive-Design erheblich erleichtert. Die CSS-Bereinigung in der Produktion garantiert ultraoptimierte Stylesheets.',
    
    // Backend
    'Express': 'Minimalistisches Node.js-Framework, schnell zu implementieren und ressourceneffizient bei geringer Last, ideal für einfache bis mittelschwere APIs.',
    'WebSocket': 'Bidirektionales Kommunikationsprotokoll, ideal für interaktive Anwendungen, deutlich ressourceneffizienter als wiederholte HTTP-Anfragen.',
    'Elixir': 'Funktionale Sprache für Nebenläufigkeit, die bei hoher Arbeitslast bessere Skalierbarkeit und Leistung als Node.js bietet.',
    'Phoenix': 'Hochleistungs-Elixir-Framework mit LiveView, das Echtzeit-Schnittstellen ohne clientseitiges JavaScript ermöglicht.',
    
    // Datenbanken
    'PostgreSQL': 'Leistungsstarkes Open-Source-Datenbankmanagementsystem mit einem nahezu unendlichen Ökosystem von Erweiterungen, das Flexibilität und Leistung für jeden Projekttyp bietet.',
    'MongoDB': 'NoSQL-Dokumentendatenbank, die Datenflexibilität und an tatsächliche Bedürfnisse angepasste Schemas ermöglicht.',
    'PostgREST': 'Verwandelt eine Postgres-DB sofort in eine REST-API. Perfekt für einfache CRUD-Operationen und entlastet das Backend von repetitiven Aufgaben. In manchen Fällen ermöglicht es sogar, ein Backend vollständig zu umgehen für direkte und sichere Front/DB-Kommunikation.',
    'Ecto': 'Elixir-Bibliothek für Datenbankinteraktion, die Abfragen für maximale Leistung optimiert.',
    
    // Werkzeuge
    'Git': 'Unerlässlich für jede kollaborative Entwicklung, behält eine klare Aufzeichnung der Änderungen bei und erleichtert gleichzeitige Beiträge zum selben Projekt.',
    'Docker': 'Gewährleistet perfekte Reproduzierbarkeit von Entwicklungsumgebungen im Team. Docker Compose vereinfacht die Orchestrierung mehrerer Dienste, und Swarm ermöglicht skalierbaren Produktionseinsatz.',
    'VS Code': 'Moderner Code-Editor mit einer guten Balance zwischen Leichtgewicht und Funktionen. Sein Erweiterungssystem ermöglicht eine präzise Anpassung an jedes Projekt.',
    'Lighthouse': 'Wesentliches Audit-Tool zur objektiven Messung und Verbesserung von Webleistung und Umweltauswirkungen.',
    
    // Methoden
    'Barrierefreiheit': 'Gestaltung von Schnittstellen, die mit allen Geräten, Browsern und Nutzungsmodi kompatibel sind. Erweitert die potenzielle Zielgruppe und gewährleistet ein inklusives Benutzererlebnis.',
    'Performance': 'Optimierung, die Ladezeiten und Ressourcennutzung reduziert. Bessere UX führt direkt zu reduzierten Infrastrukturkosten und erhöhten Conversions.',
    'Öko-Design': 'Entwicklungsansatz zur Optimierung jeder Phase des Lebenszyklus digitaler Dienste, der Leistung und Effizienz in Einklang bringt.',
    'UX/UI': 'Intuitive Schnittstellen, die den tatsächlichen Bedürfnissen der Benutzer gerecht werden. Gutes UX/UI-Design reduziert Reibungspunkte und verbessert das Engagement der Benutzer.'
  }
};

// Fonction pour obtenir la description d'une compétence
const getDescription = (skill: string): string => {
  // Vérifie si la compétence existe dans l'objet descriptions pour la langue actuelle
  if (lang in descriptions && skill in descriptions[lang]) {
    return descriptions[lang][skill];
  }
  return '';
};
---

<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
  {skills.map(skill => (
    <div class="bg-secondary bg-opacity-30 p-5 rounded-lg">
      <h3 class="text-lg font-semibold mb-4 text-accent">{skill.category}</h3>
      <div class="space-y-6">
        {skill.items.map(item => (
          <div class="mb-4">
            <div class="font-medium mb-1">{item}</div>
            <p class="text-text-muted text-sm">{getDescription(item)}</p>
          </div>
        ))}
      </div>
    </div>
  ))}
</div>